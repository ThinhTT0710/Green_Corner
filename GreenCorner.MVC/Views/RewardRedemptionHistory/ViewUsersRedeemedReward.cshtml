@model List<GreenCorner.MVC.ViewModels.UserWithVoucherRedemptionViewModel>

@{
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
    ViewData["Title"] = "Người dùng đã đổi thưởng";
}

<section class="content-main">
    <div class="content-header d-flex justify-content-between align-items-center">
        <h2 class="content-title mb-4">Người dùng đã đổi thưởng</h2>
        <div></div>
    </div>

    <div class="card mb-4">
        <header class="card-header">
            <div class="row gx-3">
                <div class="col-lg-4 col-md-6 me-auto">
                    <input type="text" placeholder="Tìm kiếm tên hoặc email..." class="form-control" id="searchInput" />
                </div>
                <div class="col-lg-2 col-md-3 col-6">
                    <select class="form-select" id="itemsPerPageFilter">
                        <option value="10" selected>Hiển thị 10</option>
                        <option value="20">Hiển thị 20</option>
                        <option value="30">Hiển thị 30</option>
                    </select>
                </div>
            </div>
        </header>

        <div class="card-body">
            @if (Model == null || !Model.Any())
            {
                <div class="alert alert-info text-center">
                    Không có người dùng nào đã đổi thưởng.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Họ tên</th>
                                <th>Email</th>
                                <th>Thao tác</th>
                            </tr>
                        </thead>
                        <tbody id="userTableBody">
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.User.FullName</td>
                                    <td>@item.User.Email</td>
                                    <td>
                                        <a asp-action="GetUserRewardRedemptionHistory"
                                           asp-controller="User"
                                           asp-route-userId="@item.User.ID"
                                           class="btn btn-sm btn-outline-primary">
                                            Xem lịch sử đổi
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div id="noResultMessage" class="text-center text-muted my-4 d-none">
                        Không tìm thấy người dùng nào phù hợp.
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="pagination-area mt-3 mb-5">
        <nav>
            <ul class="pagination justify-content-start" id="pagination"></ul>
        </nav>
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const searchInput = document.getElementById("searchInput");
            const itemsPerPageFilter = document.getElementById("itemsPerPageFilter");
            const tableBody = document.getElementById("userTableBody");
            const paginationContainer = document.getElementById("pagination");
            const noResultMessage = document.getElementById("noResultMessage");

            const allRows = Array.from(tableBody.getElementsByTagName("tr"));
            let filteredRows = [...allRows];
            let currentPage = 1;

            function updateDisplay() {
                const itemsPerPage = parseInt(itemsPerPageFilter.value, 10);
                const searchTerm = searchInput.value.toLowerCase();

                filteredRows = allRows.filter(row => {
                    const name = row.cells[0].innerText.toLowerCase();
                    const email = row.cells[1].innerText.toLowerCase();
                    return name.includes(searchTerm) || email.includes(searchTerm);
                });

                if (filteredRows.length === 0) {
                    tableBody.innerHTML = "";
                    paginationContainer.innerHTML = "";
                    noResultMessage.classList.remove("d-none");
                    return;
                }

                noResultMessage.classList.add("d-none");
                renderPagination();
                renderTableRows();
            }

            function renderTableRows() {
                const itemsPerPage = parseInt(itemsPerPageFilter.value, 10);
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;
                const paginatedRows = filteredRows.slice(startIndex, endIndex);

                tableBody.innerHTML = "";
                paginatedRows.forEach(row => tableBody.appendChild(row));
            }

            function renderPagination() {
                const itemsPerPage = parseInt(itemsPerPageFilter.value, 10);
                const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
                paginationContainer.innerHTML = "";

                if (totalPages <= 1) return;

                const prevLi = document.createElement("li");
                prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                prevLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage - 1}"><i class="material-icons md-chevron_left"></i></a>`;
                paginationContainer.appendChild(prevLi);

                for (let i = 1; i <= totalPages; i++) {
                    const pageLi = document.createElement("li");
                    pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    pageLi.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                    paginationContainer.appendChild(pageLi);
                }

                const nextLi = document.createElement("li");
                nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
                nextLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage + 1}"><i class="material-icons md-chevron_right"></i></a>`;
                paginationContainer.appendChild(nextLi);
            }

            function triggerFilter() {
                currentPage = 1;
                updateDisplay();
            }

            searchInput.addEventListener("input", triggerFilter);
            itemsPerPageFilter.addEventListener("change", triggerFilter);

            paginationContainer.addEventListener("click", function (e) {
                e.preventDefault();
                const target = e.target.closest("a.page-link");
                if (target && !target.parentElement.classList.contains('disabled')) {
                    const page = parseInt(target.dataset.page, 10);
                    if (!isNaN(page)) {
                        currentPage = page;
                        renderTableRows();
                        renderPagination();
                    }
                }
            });

            updateDisplay();
        });
    </script>
}
