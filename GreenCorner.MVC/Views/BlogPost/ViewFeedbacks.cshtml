@{
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}
@model List<GreenCorner.MVC.ViewModels.FeedbackWithUserViewModel>

@{
    ViewData["Title"] = "Danh sách phản hồi";
}

<section class="content-main">
    <div class="content-header">
        <div>
            <h2 class="content-title card-title mb-4">@ViewData["Title"]</h2>
            <p>Danh sách phản hồi từ người dùng</p>
        </div>
    </div>

    <div class="card mb-4">
        <header class="card-header">
            <div class="row gx-3">
                <div class="col-lg-4 col-md-6 me-auto">
                    <input type="text" id="searchInput" placeholder="Tìm theo tên hoặc tiêu đề..." class="form-control" />
                </div>
                <div class="col-lg-2 col-md-3 col-6">
                    <select class="form-select" id="statusFilter">
                        <option value="">Tất cả trạng thái</option>
                        <option value="true">Đã xử lý</option>
                        <option value="false">Chưa xử lý</option>
                    </select>
                </div>
                <div class="col-lg-2 col-md-3 col-6">
                    <select class="form-select" id="itemsPerPage">
                        <option value="10">Hiển thị 10</option>
                        <option value="20">Hiển thị 20</option>
                        <option value="50">Hiển thị 50</option>
                    </select>
                </div>
            </div>
        </header>

        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover align-middle" id="feedbackTable">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Người gửi</th>
                            <th>Tiêu đề</th>
                            <th>Nội dung</th>
                            <th>Thời gian</th>
                        </tr>
                    </thead>
                    <tbody id="feedbackBody">
                        @if (Model.Any())
                        {
                            foreach (var item in Model)
                            {
                                <tr class="feedback-row"
                                    data-name="@item.User?.FullName?.ToLower()"
                                    data-title="@item.Feedback.Title.ToLower()"
                                    data-status="@item.Feedback.ToString().ToLower()">
                                    <td>@item.Feedback.FeedBackId</td>
                                    <td>@(item.User?.FullName ?? "Không rõ")</td>
                                    <td>@item.Feedback.Title</td>
                                    <td>@item.Feedback.Content</td>
                                    <td>@item.Feedback.CreatedAt?.ToString("dd/MM/yyyy HH:mm")</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" class="text-center">Không có phản hồi nào</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="pagination-area mt-3">
                <nav>
                    <ul class="pagination justify-content-start" id="pagination"></ul>
                </nav>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const searchInput = document.getElementById("searchInput");
            const statusFilter = document.getElementById("statusFilter");
            const itemsPerPage = document.getElementById("itemsPerPage");
            const feedbackBody = document.getElementById("feedbackBody");
            const pagination = document.getElementById("pagination");

            const allRows = Array.from(document.querySelectorAll(".feedback-row"));
            let currentPage = 1;

            function filterRows() {
                const keyword = searchInput.value.toLowerCase();
                const selectedStatus = statusFilter.value;

                return allRows.filter(row => {
                    const name = row.dataset.name || "";
                    const title = row.dataset.title || "";
                    const status = row.dataset.status;

                    const matchesText = name.includes(keyword) || title.includes(keyword);
                    const matchesStatus = selectedStatus === "" || status === selectedStatus;

                    return matchesText && matchesStatus;
                });
            }

            function renderTable() {
                const perPage = parseInt(itemsPerPage.value);
                const filtered = filterRows();
                const totalPages = Math.ceil(filtered.length / perPage);

                const start = (currentPage - 1) * perPage;
                const end = start + perPage;

                feedbackBody.innerHTML = "";
                filtered.slice(start, end).forEach(row => feedbackBody.appendChild(row));

                renderPagination(totalPages);
            }

            function renderPagination(totalPages) {
                pagination.innerHTML = "";

                if (totalPages <= 1) return;

                for (let i = 1; i <= totalPages; i++) {
                    const li = document.createElement("li");
                    li.className = `page-item ${i === currentPage ? "active" : ""}`;
                    li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                    li.addEventListener("click", e => {
                        e.preventDefault();
                        currentPage = i;
                        renderTable();
                    });
                    pagination.appendChild(li);
                }
            }

            [searchInput, statusFilter].forEach(el => {
                el.addEventListener("input", () => {
                    currentPage = 1;
                    renderTable();
                });
            });

            itemsPerPage.addEventListener("change", () => {
                currentPage = 1;
                renderTable();
            });

            renderTable();
        });
    </script>
}
