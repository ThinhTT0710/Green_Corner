@model GreenCorner.MVC.ViewModels.VolunteerEventListViewModel

<section class="content-main">
    <div class="content-header">
        <h2 class="content-title mb-4">Hoạt động đã đăng ký</h2>
    </div>

    <div class="card mb-4">
        <header class="card-header">
            <div class="row gx-3">
                <div class="col-lg-4 col-md-6 me-auto">
                    <input type="text" id="searchInput" placeholder="Tìm kiếm sự kiện..." class="form-control" />
                </div>
                <div class="col-lg-2 col-md-3 col-6">
                    <select class="form-select" id="statusFilter">
                        <option value="">Tất cả trạng thái</option>
                        <option value="Approved">Đã duyệt</option>
                        <option value="Pending">Đang chờ duyệt</option>
                        <option value="Removed">Đã bị hủy</option>
                    </select>
                </div>
                <div class="col-lg-2 col-md-3 col-6">
                    <select class="form-select" id="itemsPerPage">
                        <option value="10">Hiển thị 10</option>
                        <option value="20">Hiển thị 20</option>
                        <option value="50">Hiển thị 50</option>
                    </select>
                </div>
            </div>
        </header>

        <div class="card-body">
            @if (!Model.Participations.Any())
            {
                <div class="alert alert-info text-center">
                    Bạn chưa tham gia hoạt động nào.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover align-middle" id="participationTable">
                        <thead class="table-light">
                            <tr>
                                <th>Tên sự kiện</th>
                                <th>Ngày bắt đầu</th>
                                <th>Ngày kết thúc</th>
                                <th>Trạng thái sự kiện</th>
                                <th>Loại đơn</th>
                                <th>Phân công</th>
                                <th>Vật dụng mang theo</th>
                                <th>Trạng thái đăng ký</th>
                                <th>Ngày đăng ký</th>
                            </tr>
                        </thead>
                        <tbody id="tableBody">
                            @foreach (var item in Model.Participations)
                            {
                                var eventStatus = item.Event.Status;
                                var eventStatusText = eventStatus switch
                                {
                                    "Approved" => "Đã duyệt",
                                    "Pending" => "Đang chờ duyệt",
                                    "Removed" => "Đã bị hủy",
                                    _ => "Không xác định"
                                };

                                var volunteerStatus = item.Volunteer.Status;
                                var volunteerStatusText = volunteerStatus switch
                                {
                                    "Approved" => "Đã duyệt",
                                    "Pending" => "Đang chờ duyệt",
                                    "Rejected" => "Đã bị từ chối",
                                    _ => "Không xác định"
                                };
                                <tr class="participation-row"
                                    data-title="@item.Event.Title.ToLower()"
                                    data-status="@eventStatus.ToLower()">
                                    <td>@item.Event.Title</td>
                                    <td>@item.Event.StartDate?.ToString("dd/MM/yyyy")</td>
                                    <td>@item.Event.EndDate?.ToString("dd/MM/yyyy")</td>
                                    <td>@eventStatusText</td>
                                    <td>@item.Volunteer.ApplicationType</td>
                                    <td>@item.Volunteer.Assignment</td>
                                    <td>@item.Volunteer.CarryItems</td>
                                    <td>@volunteerStatusText</td>
                                    <td>@item.Volunteer.CreatedAt?.ToString("dd/MM/yyyy")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    <div class="pagination-area mt-15 mb-50">
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-start" id="pagination"></ul>
        </nav>
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const searchInput = document.getElementById("searchInput");
            const statusFilter = document.getElementById("statusFilter");
            const itemsPerPage = document.getElementById("itemsPerPage");
            const tableBody = document.getElementById("tableBody");
            const pagination = document.getElementById("pagination");

            const allRows = Array.from(document.querySelectorAll(".participation-row"));
            let filteredRows = [...allRows];
            let currentPage = 1;

            function filterRows() {
                const searchTerm = searchInput.value.toLowerCase();
                const selectedStatus = statusFilter.value.toLowerCase();

                return allRows.filter(row => {
                    const title = row.dataset.title;
                    const status = row.dataset.status;

                    return title.includes(searchTerm) && (selectedStatus === "" || status === selectedStatus);
                });
            }

            function renderTable() {
                const perPage = parseInt(itemsPerPage.value);
                const rows = filterRows();
                const totalPages = Math.ceil(rows.length / perPage);

                const start = (currentPage - 1) * perPage;
                const end = start + perPage;

                tableBody.innerHTML = "";
                rows.slice(start, end).forEach(row => tableBody.appendChild(row));

                pagination.innerHTML = "";
                if (totalPages > 1) {
                    for (let i = 1; i <= totalPages; i++) {
                        const li = document.createElement("li");
                        li.className = `page-item ${i === currentPage ? "active" : ""}`;
                        li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                        li.addEventListener("click", e => {
                            e.preventDefault();
                            currentPage = i;
                            renderTable();
                        });
                        pagination.appendChild(li);
                    }
                }
            }

            [searchInput, statusFilter].forEach(input =>
                input.addEventListener("input", () => {
                    currentPage = 1;
                    renderTable();
                })
            );

            itemsPerPage.addEventListener("change", () => {
                currentPage = 1;
                renderTable();
            });

            renderTable();
        });
    </script>
}
