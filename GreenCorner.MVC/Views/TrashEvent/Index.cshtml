@model IEnumerable<TrashReportListViewModel>
@{
    ViewData["Title"] = "Report List";
    Layout = "_LayoutAdmin";
}
﻿
<section class="content-main">
    <div class="content-header">
        <div>
            <h2 class="content-title card-title">Danh sách báo cáo</h2>
            <p>Danh sách các điểm rác thải được báo cáo bởi người dùng.</p>
        </div>
    </div>
    <div class="card mb-4">
        <header class="card-header">
            <div class="row gx-3">
                <div class="col-lg-4 col-md-6 me-auto">
                    <input type="text" placeholder="Tìm kiếm..." class="form-control" id="searchInput" />
                </div>
                <div class="col-lg-2 col-6 col-md-3"  >
                    <select class="form-select" id="statusFilter">
                        <option>Status</option>
                        <option>Chờ xác nhận</option>
                        <option>Đã xác nhận</option>
                        <option>Đã từ chối</option>
                    </select>
                </div>
                <div class="col-lg-2 col-6 col-md-3"  >
                    <select class="form-select" id="itemsPerPageFilter">
                        <option value="10" selected>Hiển thị 10</option>
                        <option value="20">Hiển thị 20</option>
                        <option value="30">Hiển thị 30</option>
                        <option value="40">Hiển thị 40</option>
                    </select>
                </div>
            </div>
        </header>
        <!-- card-header end// -->
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>#ID</th>
                            <th scope="col">Người báo cáo</th>
                            <th scope="col">Email</th>
                            <th scope="col">Địa chỉ</th>
                            <th scope="col">Mô tả</th>
                            <th scope="col">Trạng thái</th>
                            <th scope="col">Ngày báo cáo</th>
                            <th scope="col" class="text-end">Action</th>
                        </tr>
                    </thead>
                    <tbody id="trashEventTableBody">
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.TrashEvent.TrashReportId</td>
                                <td>
                                    <a class="itemside" href="#">
                                        <div class="left">
                                            @{
                                                var imageUrl = item.TrashEvent.ImageUrl;
                                                var reportImg = imageUrl?.Contains("&") == true ? imageUrl.Split('&')[0] :
                                                imageUrl;
                                            }
                                            <img src="@reportImg" class="img-sm img-thumbnail" alt="Avatar" />
                                        </div>
                                        <div class="info">
                                            <h6 class="mb-0">@item.User.FullName</h6>
                                        </div>
                                    </a>
                                </td>
                                <td>@item.User.Email</td>
                                <td>@item.TrashEvent.Address</td>
                                <td>@item.TrashEvent.Description</td>
                                <td><span class="badge rounded-pill badge-soft-success">@item.TrashEvent.Status</span></td>
                                <td>@item.TrashEvent.CreatedAt?.ToString("dd/MM/yyyy")</td>
                                <td>
                                    <div class="dropdown">
                                        <a href="#" data-bs-toggle="dropdown" class="btn btn-light rounded btn-sm font-sm">
                                            <i class="material-icons md-more_horiz"></i>
                                        </a>
                                        <div class="dropdown-menu">
                                            <a class="dropdown-item" asp-action="Detail" asp-controller="TrashEvent" asp-route-trashReportId="@item.TrashEvent.TrashReportId">View detail</a>
                                            @if (item.TrashEvent.Status == "Chờ xác nhận")
                                            {
                                                <a class="dropdown-item" asp-action="ApproveTrashEvent"
                                                    asp-route-trashReportId="@item.TrashEvent.TrashReportId">Chấp nhận</a>
                                                <a class="dropdown-item text-danger" asp-action="RejectrashEvent"
                                                    asp-route-trashReportId="@item.TrashEvent.TrashReportId">Từ chối</a>
                                            }
                                            @if (item.TrashEvent.Status == "Đã xác nhận")
                                            {
                                                <a class="dropdown-item" href="#">Tạo sự kiện</a>
                                            }
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div id="noResultMessage" class="text-center text-muted my-4 d-none">
                    Không tìm thấy báo cáo rác nào phù hợp.
                </div>
            </div>
        </div>
    </div>
    <div class="pagination-area mt-15 mb-50">
        <nav aria-label="Page navigation example" >
            <ul class="pagination justify-content-start" id="pagination">
            </ul>
        </nav>
    </div>
</section>

section Scripts {
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchInput = document.getElementById("searchInput");
        const statusFilter = document.getElementById("statusFilter");
        const itemsPerPageFilter = document.getElementById("itemsPerPageFilter");

        const tableBody = document.getElementById("trashEventTableBody");
        const paginationContainer = document.getElementById("pagination");
        const noResultMessage = document.getElementById("noResultMessage");

        const allRows = Array.from(tableBody.getElementsByTagName("tr"));
        let filteredRows = [...allRows];
        let currentPage = 1;

        function updateDisplay() {
            const itemsPerPage = parseInt(itemsPerPageFilter.value, 10);
            const searchTerm = searchInput.value.toLowerCase();
            const selectedStatus = statusFilter.value.toLowerCase();

            filteredRows = allRows.filter(row => {
                const id = row.cells[0].innerText.toLowerCase();
                const reporter = row.cells[1].innerText.toLowerCase();
                const email = row.cells[2].innerText.toLowerCase();
                const address = row.cells[3].innerText.toLowerCase();
                const description = row.cells[4].innerText.toLowerCase();
                const statusText = row.cells[5].innerText.toLowerCase();
                const date = row.cells[6].innerText.toLowerCase();

                const matchesSearch =
                    id.includes(searchTerm) ||
                    reporter.includes(searchTerm) ||
                    email.includes(searchTerm) ||
                    address.includes(searchTerm) ||
                    description.includes(searchTerm) ||
                    statusText.includes(searchTerm) ||
                    date.includes(searchTerm);

                const matchesStatus = (selectedStatus === "status" || statusText === selectedStatus);

                return matchesSearch && matchesStatus;
            });

            if (filteredRows.length === 0) {
                tableBody.innerHTML = "";
                paginationContainer.innerHTML = "";
                noResultMessage.classList.remove("d-none");
                return;
            }

            noResultMessage.classList.add("d-none");
            renderPagination();
            renderTableRows();
        }

        function renderTableRows() {
            const itemsPerPage = parseInt(itemsPerPageFilter.value, 10);
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const paginatedRows = filteredRows.slice(startIndex, endIndex);

            tableBody.innerHTML = "";
            paginatedRows.forEach(row => tableBody.appendChild(row));
        }

        function renderPagination() {
            const itemsPerPage = parseInt(itemsPerPageFilter.value, 10);
            const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
            paginationContainer.innerHTML = "";

            if (totalPages <= 1) return;

            const prevLi = document.createElement("li");
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage - 1}" style="padding: 6px;"><i class="material-icons md-chevron_left"></i></a>`;
            paginationContainer.appendChild(prevLi);

            for (let i = 1; i <= totalPages; i++) {
                const pageLi = document.createElement("li");
                pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                pageLi.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                paginationContainer.appendChild(pageLi);
            }

            const nextLi = document.createElement("li");
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage + 1}" style="padding: 6px;"><i class="material-icons md-chevron_right"></i></a>`;
            paginationContainer.appendChild(nextLi);
        }


        function triggerFilter() {
            currentPage = 1;
            updateDisplay();
        }

        searchInput.addEventListener("input", triggerFilter);
        statusFilter.addEventListener("change", triggerFilter);
        itemsPerPageFilter.addEventListener("change", triggerFilter);

        paginationContainer.addEventListener("click", function (e) {
            e.preventDefault();
            const target = e.target.closest("a.page-link");
            if (target && !target.parentElement.classList.contains('disabled')) {
                const page = parseInt(target.dataset.page, 10);
                if (!isNaN(page)) {
                    currentPage = page;
                    renderTableRows();
                    renderPagination();
                }
            }
        });

        updateDisplay();
    });
</script>
}