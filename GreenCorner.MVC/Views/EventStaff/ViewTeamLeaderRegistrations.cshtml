@model VolunteerRegistrationsViewModel
@{
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
    ViewData["Title"] = "Danh sách đơn đăng ký làm Đội trưởng";
}

<section class="content-main">
    <div class="content-header">
        <h2 class="content-title mb-4">@ViewData["Title"]</h2>
    </div>

    <div class="card mb-4">
        <header class="card-header">
            <div class="row gx-3 align-items-center">
                <div class="col-lg-4 col-md-6 me-auto">
                    <input type="text" class="form-control" placeholder="Tìm kiếm..." id="searchInput" />
                </div>
                <div class="col-lg-2 col-md-3 col-6">
                    <select class="form-select" id="itemsPerPageFilter">
                        <option value="10" selected>Hiển thị 10</option>
                        <option value="20">Hiển thị 20</option>
                        <option value="30">Hiển thị 30</option>
                    </select>
                </div>
            </div>
        </header>

        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover align-middle">
                    <thead class="table-light text-center">
                        <tr>
                            <th>ID</th>
                            <th>Người dùng</th>
                            <th>Sự kiện</th>
                            <th>Loại đơn</th>
                            <th>Phân công</th>
                            <th>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody id="registrationTableBody">
                        @if (!Model.Registrations.Any())
                        {
                            <tr>
                                <td colspan="6" class="text-center text-muted">Không có đơn đăng ký nào.</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var item in Model.Registrations)
                            {
                                <tr>
                                    <td class="text-center">@item.Volunteer.VolunteerId</td>
                                    <td class="text-center">@item.User.FullName</td>
                                    <td class="text-center">@item.Volunteer.CleanEventId</td>
                                    <td class="text-center">@item.Volunteer.ApplicationType</td>
                                    <td class="text-center">
                                        @{
                                            var status = item.Volunteer.Status;
                                            string statusDisplay = status switch
                                            {
                                                "Pending" => "Đang chờ duyệt",
                                                "Approved" => "Đã duyệt",
                                                "Removed" => "Đã bị hủy",
                                                _ => "Không xác định"
                                            };
                                            string statusClass = status switch
                                            {
                                                "Pending" => "text-warning",
                                                "Approved" => "text-success",
                                                "Removed" => "text-danger",
                                                _ => "text-muted"
                                            };
                                        }
                                        <span class="@statusClass fw-semibold">@statusDisplay</span>
                                    </td>
                                    <td class="text-end">
                                        <div class="dropdown">
                                            <a href="#" data-bs-toggle="dropdown" class="btn btn-light rounded btn-sm font-sm">
                                                <i class="material-icons md-more_horiz"></i>
                                            </a>
                                            <div class="dropdown-menu dropdown-menu-end">
                                                <a class="dropdown-item" asp-action="ViewTeamLeaderRegistrationDetail" asp-route-id="@item.Volunteer.VolunteerId">
                                                    <i class="bi bi-eye me-2"></i> Chi tiết
                                                </a>

                                                <form asp-action="ApproveTeamLeader" asp-route-id="@item.Volunteer.VolunteerId" method="post" class="dropdown-item m-0 p-0 approve-form">
                                                    <button type="submit" class="dropdown-item text-success">
                                                        <i class="bi bi-check-circle me-2"></i> Phê duyệt
                                                    </button>
                                                </form>

                                                <form asp-action="RejectTeamLeader" asp-route-id="@item.Volunteer.VolunteerId" method="post" class="dropdown-item m-0 p-0 reject-form">
                                                    <button type="submit" class="dropdown-item text-danger">
                                                        <i class="bi bi-x-circle me-2"></i> Từ chối
                                                    </button>
                                                </form>
                                            </div>
                                        </div>
                                    </td>

                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>

            <div class="pagination-area mt-3">
                <nav>
                    <ul class="pagination justify-content-start" id="pagination"></ul>
                </nav>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.approve-form').forEach(form => {
                form.addEventListener('submit', function (e) {
                    e.preventDefault();

                    Swal.fire({
                        title: 'Bạn chắc chắn không?',
                        text: "Bạn có muốn duyệt cho người dùng này làm đội trưởng sự kiện ?",
                        icon: 'success',
                        showCancelButton: true,
                        confirmButtonColor: '#3BB77E',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Đồng ý',
                        cancelButtonText: 'Hủy'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            form.submit();
                        }
                    });
                });
            });

            document.querySelectorAll('.reject-form').forEach(form => {
                form.addEventListener('submit', function (e) {
                    e.preventDefault();

                    Swal.fire({
                        title: 'Bạn chắc chắn không?',
                        text: "Bạn có muốn từ chối cho người dùng này làm đội trưởng sự kiện ?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3BB77E',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Đồng ý',
                        cancelButtonText: 'Hủy'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            form.submit();
                        }
                    });
                });
            });

        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const searchInput = document.getElementById("searchInput");
            const itemsPerPageFilter = document.getElementById("itemsPerPageFilter");
            const tableBody = document.getElementById("registrationTableBody");
            const paginationContainer = document.getElementById("pagination");

            const allRows = Array.from(tableBody.getElementsByTagName("tr"));
            let filteredRows = [...allRows];
            let currentPage = 1;

            function getItemsPerPage() {
                return parseInt(itemsPerPageFilter.value, 10);
            }

            function updateDisplay() {
                const searchTerm = searchInput.value.toLowerCase();
                filteredRows = allRows.filter(row => {
                    return Array.from(row.cells).some(cell =>
                        cell.innerText.toLowerCase().includes(searchTerm)
                    );
                });
                renderPagination();
                renderTableRows();
            }

            function renderTableRows() {
                const itemsPerPage = getItemsPerPage();
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;
                const paginatedRows = filteredRows.slice(startIndex, endIndex);

                tableBody.innerHTML = "";
                paginatedRows.forEach(row => tableBody.appendChild(row));
            }

            function renderPagination() {
                const itemsPerPage = getItemsPerPage();
                const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
                paginationContainer.innerHTML = "";

                if (totalPages <= 1) return;

                const prevLi = document.createElement("li");
                prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                prevLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage - 1}">&laquo;</a>`;
                paginationContainer.appendChild(prevLi);

                for (let i = 1; i <= totalPages; i++) {
                    const pageLi = document.createElement("li");
                    pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    pageLi.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                    paginationContainer.appendChild(pageLi);
                }

                const nextLi = document.createElement("li");
                nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
                nextLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage + 1}">&raquo;</a>`;
                paginationContainer.appendChild(nextLi);
            }

            function triggerFilter() {
                currentPage = 1;
                updateDisplay();
            }

            searchInput.addEventListener("input", triggerFilter);
            itemsPerPageFilter.addEventListener("change", triggerFilter);

            paginationContainer.addEventListener("click", function (e) {
                e.preventDefault();
                const target = e.target.closest("a.page-link");
                if (target && !target.parentElement.classList.contains("disabled")) {
                    const page = parseInt(target.dataset.page, 10);
                    if (!isNaN(page)) {
                        currentPage = page;
                        renderTableRows();
                        renderPagination();
                    }
                }
            });

            updateDisplay();
        });
    </script>
}
