@model List<GreenCorner.MVC.ViewModels.BlogWithAuthorViewModel>

@{
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
    ViewData["Title"] = "Danh sách bài viết";
    var favoriteBlogIds = ViewBag.FavoriteBlogIds as List<int> ?? new();
}

<section class="content-main">
    <div class="content-header d-flex justify-content-between align-items-center">
        <div>
            <h2 class="content-title card-title mb-4">Danh sách bài viết</h2>
            <p class="text-muted">Quản lý bài viết và trạng thái duyệt.</p>
        </div>
    </div>

    <div class="card mb-4">
        <header class="card-header">
            <div class="row gx-3 align-items-center">
                <div class="col-lg-4 col-md-6 me-auto">
                    <input type="text" placeholder="Tìm kiếm tiêu đề..." class="form-control text-center" id="searchInput" />
                </div>
                <div class="col-lg-2 col-md-3 col-6">
                    <select class="form-select" id="itemsPerPageFilter">
                        <option value="10" selected>Hiển thị 10</option>
                        <option value="20">Hiển thị 20</option>
                        <option value="30">Hiển thị 30</option>
                    </select>
                </div>
            </div>
        </header>

        <div class="card-body">
            <div id="noResultMessage" class="text-center text-muted my-4 d-none">
                Không tìm thấy bài viết nào phù hợp.
            </div>
            <div class="row gx-3 gy-4 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 row-cols-xxl-5 justify-content-center" id="blogContainer">
                @if (Model != null && Model.Any())
                {
                    foreach (var blog in Model)
                    {
                        var isFavorited = favoriteBlogIds.Contains(blog.Blog.BlogId);
                        <div class="col d-flex justify-content-center blog-item">
                            <div class="card card-product-grid text-center w-100 h-100">
                                <a asp-action="ViewPendingPostDetail" asp-route-id="@blog.Blog.BlogId"
                                   class="img-wrap bg-light d-flex align-items-center justify-content-center"
                                   style="height: 150px;">

                                    @{
                                        var firstImage = blog.Blog.ThumbnailUrl?.Split('&', StringSplitOptions.RemoveEmptyEntries).FirstOrDefault();
                                    }

                                    @if (!string.IsNullOrEmpty(firstImage))
                                    {
                                        <img src="@firstImage" style="max-height: 100%; max-width: 100%; object-fit: contain;" />
                                    }
                                    else
                                    {
                                        <i class="material-icons text-muted" style="font-size:48px;">article</i>
                                    }
                                </a>

                                <div class="info-wrap p-2">
                                    <a asp-action="ViewPendingPostDetail" asp-route-id="@blog.Blog.BlogId"
                                       class="title text-truncate fw-bold d-block mb-1">
                                        @blog.Blog.Title
                                    </a>
                                    <div class="text-muted mb-1 author-name" style="font-size:13px;">
                                        Tác giả: <strong>@blog.Author?.FullName</strong>
                                    </div>
                                    <div class="text-muted mb-2 created-date" style="font-size:13px;">
                                        Ngày tạo: <span>@blog.Blog.CreatedAt?.ToString("dd/MM/yyyy")</span>
                                    </div>
                                    <div class="mb-2">
                                        @{
                                            string status = blog.Blog.Status;
                                            string badgeClass = status == "Approved" ? "bg-success"
                                            : status == "Rejected" ? "bg-danger"
                                            : "bg-warning";

                                            string statusText = status switch
                                            {
                                                "Approved" => "Đã duyệt",
                                                "Rejected" => "Từ chối",
                                                "Pending" => "Đang chờ duyệt",
                                                _ => "Không xác định"
                                            };
                                        }

                                        <span class="badge rounded-pill text-white @badgeClass">
                                            @statusText
                                        </span>
                                    </div>

                                    <div class="d-flex justify-content-center gap-1">
                                        <!-- Nút Phê duyệt -->
                                        <button type="button" class="btn btn-sm btn-success rounded btn-confirm-action"
                                                data-id="@blog.Blog.BlogId" data-action="approve">
                                            <i class="material-icons md-check_circle"></i> Phê duyệt
                                        </button>

                                        <!-- Nút Từ chối -->
                                        <button type="button" class="btn btn-sm btn-danger rounded btn-confirm-action"
                                                data-id="@blog.Blog.BlogId" data-action="reject">
                                            <i class="material-icons md-cancel"></i> Từ chối
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <div class="pagination-area mt-3 mb-5">
        <nav>
            <ul class="pagination justify-content-center" id="pagination"></ul>
        </nav>
    </div>
</section>
<!-- Modal xác nhận -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <form id="confirmForm" method="post">
        <div class="modal-header">
          <h5 class="modal-title" id="confirmModalLabel">Xác nhận hành động</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
        </div>
        <div class="modal-body">
          <p id="modalMessage">Bạn có chắc chắn muốn thực hiện hành động này?</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" style="border-radius: 10px;" data-bs-dismiss="modal">Hủy</button>
          <button type="submit" class="btn btn-primary" style="font-weight: 500;font-size: 14px;padding: 10px 40px; border-radius: 10px;">Xác nhận</button>
        </div>
      </form>
    </div>
  </div>
</div>


@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const searchInput = document.getElementById("searchInput");
            const itemsPerPageFilter = document.getElementById("itemsPerPageFilter");
            const blogContainer = document.getElementById("blogContainer");
            const noResultMessage = document.getElementById("noResultMessage");
            const paginationContainer = document.getElementById("pagination");

            const allCards = Array.from(blogContainer.getElementsByClassName("blog-item"));
            let filteredCards = [...allCards];
            let currentPage = 1;

            function updateDisplay() {
                const itemsPerPage = parseInt(itemsPerPageFilter.value, 10);
                const searchTerm = searchInput.value.toLowerCase();

                filteredCards = allCards.filter(card => {
                    const title = card.querySelector(".title")?.innerText.toLowerCase() || "";
                    const author = card.querySelector(".author-name")?.innerText.toLowerCase() || "";
                    const date = card.querySelector(".created-date")?.innerText.toLowerCase() || "";

                    return title.includes(searchTerm) || author.includes(searchTerm) || date.includes(searchTerm);
                });


                if (filteredCards.length === 0) {
                    blogContainer.innerHTML = "";
                    paginationContainer.innerHTML = "";
                    noResultMessage.classList.remove("d-none");
                    return;
                }

                noResultMessage.classList.add("d-none");
                renderPagination();
                renderCards();
            }

            function renderCards() {
                const itemsPerPage = parseInt(itemsPerPageFilter.value, 10);
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;
                const paginatedCards = filteredCards.slice(startIndex, endIndex);

                blogContainer.innerHTML = "";
                paginatedCards.forEach(card => blogContainer.appendChild(card));
            }

            function renderPagination() {
                const itemsPerPage = parseInt(itemsPerPageFilter.value, 10);
                const totalPages = Math.ceil(filteredCards.length / itemsPerPage);
                paginationContainer.innerHTML = "";

                if (totalPages <= 1) return;

                const prevLi = document.createElement("li");
                prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                prevLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage - 1}"><i class="material-icons md-chevron_left"></i></a>`;
                paginationContainer.appendChild(prevLi);

                for (let i = 1; i <= totalPages; i++) {
                    const pageLi = document.createElement("li");
                    pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    pageLi.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                    paginationContainer.appendChild(pageLi);
                }

                const nextLi = document.createElement("li");
                nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
                nextLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage + 1}"><i class="material-icons md-chevron_right"></i></a>`;
                paginationContainer.appendChild(nextLi);
            }

            function triggerFilter() {
                currentPage = 1;
                updateDisplay();
            }

            searchInput.addEventListener("input", triggerFilter);
            itemsPerPageFilter.addEventListener("change", triggerFilter);

            paginationContainer.addEventListener("click", function (e) {
                e.preventDefault();
                const target = e.target.closest("a.page-link");
                if (target && !target.parentElement.classList.contains("disabled")) {
                    const page = parseInt(target.dataset.page, 10);
                    if (!isNaN(page)) {
                        currentPage = page;
                        renderCards();
                        renderPagination();
                    }
                }
            });

            updateDisplay();
        });


        // === SCRIPT XỬ LÝ MỞ MODAL ===
        document.addEventListener("DOMContentLoaded", function () {
            const confirmModalEl = document.getElementById("confirmModal");
            const modal = new bootstrap.Modal(confirmModalEl);
            const confirmForm = document.getElementById("confirmForm");
            const modalMessage = document.getElementById("modalMessage");

            document.querySelectorAll(".btn-confirm-action").forEach(btn => {
                btn.addEventListener("click", () => {
                    const blogId = btn.dataset.id;
                    const action = btn.dataset.action;

                    const isApprove = action === "approve";
                    confirmForm.action = `/EventStaff/${isApprove ? "BlogApprove" : "BlogReject"}/${blogId}`;
                    modalMessage.textContent = `Bạn có chắc muốn ${isApprove ? "phê duyệt" : "từ chối"} bài viết này không?`;

                    modal.show();
                });
            });
        });
    </script>
}
