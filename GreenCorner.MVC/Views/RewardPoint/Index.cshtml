@model List<RewardPointWithUserViewModel>
@{
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
    ViewData["Title"] = "Danh sách điểm thưởng";
}


<section class="content-main">
    <div class="content-header">
        <h2 class="content-title">Danh sách điểm thưởng người dùng</h2>
    </div>
    <div class="card mb-4">
        <header class="card-header">
            <div class="row gx-3">
                <div class="col-lg-4 col-md-6 me-auto">
                    <input type="text" placeholder="Tìm kiếm..." class="form-control" id="searchInput" />
                </div>
                <div class="col-lg-2 col-md-3 col-6">
                    <select class="form-select" id="statusFilter">
                        <option disable selected>Trạng thái</option>
                        <option>Hoạt động</option>
                        <option>Bị chặn</option>
                    </select>
                </div>
                <div class="col-lg-2 col-md-3 col-6">
                    <select class="form-select" id="itemsPerPageFilter">
                        <option value="10" selected>Hiển thị 10</option>
                        <option value="20">Hiển thị 20</option>
                        <option value="30">Hiển thị 30</option>
                        <option value="40">Hiển thị 40</option>
                    </select>
                </div>
            </div>
        </header>
        <!-- card-header end// -->
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Họ và tên</th>
                            <th>Email</th>
                            <th>Trạng thái</th>
                            <th>Số điện thoại</th>
                            <th>Tổng điểm</th>
                        </tr>
                    </thead>
                    <tbody id="userTableBody">
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td width="40%">
                                    <a asp-controller="Admin" asp-action="UserDetail" asp-route-userId="@item.User.ID" class="itemside">
                                        <div class="left">
                                            <img src="@item.User.Avatar" class="img-sm img-avatar" alt="Userpic" />
                                        </div>
                                        <div class="info pl-3">
                                            <h6 class="mb-0 title">@item.User.FullName</h6>
                                            <small class="text-muted">#@item.User.ID</small>
                                        </div>
                                    </a>
                                </td>
                                <td>@item.User.Email</td>
                                @if (!item.User.IsBan)
                                {
                                    <td><span class="badge rounded-pill badge-soft-success">Hoạt động</span></td>
                                }
                                else
                                {
                                    <td><span class="badge rounded-pill badge-soft-danger">Bị khóa</span></td>
                                }
                                <td>@item.User.PhoneNumber</td>
                                <td class="text-success">@item.Reward.TotalPoints</td>
                            </tr>
                        }

                    </tbody>
                </table>
                <div id="noResultMessage" class="text-center text-muted my-4 d-none">
                    Không tìm thấy người dùng nào phù hợp.
                </div>
            </div>
        </div>
    </div>
    <div class="pagination-area mt-15 mb-50">
        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-start" id="pagination">
            </ul>
        </nav>
    </div>
</section>
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const searchInput = document.getElementById("searchInput");
            const statusFilter = document.getElementById("statusFilter");
            const itemsPerPageFilter = document.getElementById("itemsPerPageFilter");
            const tableBody = document.getElementById("userTableBody");
            const paginationContainer = document.getElementById("pagination");
            const noResultMessage = document.getElementById("noResultMessage");

            const allRows = Array.from(tableBody.getElementsByTagName("tr"));
            let filteredRows = [...allRows];
            let currentPage = 1;

            function updateDisplay() {
                const itemsPerPage = parseInt(itemsPerPageFilter.value, 10);
                const searchTerm = searchInput.value.toLowerCase();
                const selectedStatus = statusFilter.value.toLowerCase();

                filteredRows = allRows.filter(row => {
                    const fullNameAndId = row.cells[0].innerText.toLowerCase();
                    const email = row.cells[1].innerText.toLowerCase();
                    const statusText = row.cells[2].innerText.toLowerCase();
                    const phone = row.cells[3].innerText.toLowerCase();
                    const points = row.cells[4].innerText.toLowerCase(); // THÊM: Lấy dữ liệu cột điểm

                    const matchesSearch =
                        fullNameAndId.includes(searchTerm) ||
                        email.includes(searchTerm) ||
                        phone.includes(searchTerm) ||
                        points.includes(searchTerm); // SỬA: Thêm điều kiện tìm kiếm cho điểm

                    const matchesStatus = (selectedStatus === "trạng thái" || statusText === selectedStatus);

                    return matchesSearch && matchesStatus;
                });

                if (filteredRows.length === 0) {
                    tableBody.innerHTML = "";
                    paginationContainer.innerHTML = "";
                    noResultMessage.classList.remove("d-none");
                    return;
                }

                noResultMessage.classList.add("d-none");
                renderPagination();
                renderTableRows();
            }

            function renderTableRows() {
                const itemsPerPage = parseInt(itemsPerPageFilter.value, 10);
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;
                const paginatedRows = filteredRows.slice(startIndex, endIndex);

                tableBody.innerHTML = "";
                paginatedRows.forEach(row => tableBody.appendChild(row));
            }

            function renderPagination() {
                const itemsPerPage = parseInt(itemsPerPageFilter.value, 10);
                const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
                paginationContainer.innerHTML = "";

                if (totalPages <= 1) return;

                const prevLi = document.createElement("li");
                prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                prevLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage - 1}" style="padding: 6px;"><i class="material-icons md-chevron_left"></i></a>`;
                paginationContainer.appendChild(prevLi);

                for (let i = 1; i <= totalPages; i++) {
                    const pageLi = document.createElement("li");
                    pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    pageLi.innerHTML = `<a class="page-link" href="#" data-page="${i}">${i}</a>`;
                    paginationContainer.appendChild(pageLi);
                }

                const nextLi = document.createElement("li");
                nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
                nextLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage + 1}" style="padding: 6px;"><i class="material-icons md-chevron_right"></i></a>`;
                paginationContainer.appendChild(nextLi);
            }

            function triggerFilter() {
                currentPage = 1;
                updateDisplay();
            }

            searchInput.addEventListener("input", triggerFilter);
            statusFilter.addEventListener("change", triggerFilter);
            itemsPerPageFilter.addEventListener("change", triggerFilter);

            paginationContainer.addEventListener("click", function (e) {
                e.preventDefault();
                const target = e.target.closest("a.page-link");
                if (target && !target.parentElement.classList.contains('disabled')) {
                    const page = parseInt(target.dataset.page, 10);
                    if (!isNaN(page)) {
                        currentPage = page;
                        renderTableRows();
                        renderPagination();
                    }
                }
            });

            updateDisplay();
        });
    </script>
}
