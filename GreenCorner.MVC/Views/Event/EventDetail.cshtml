@model EventDetailViewModel
@{
    ViewData["Title"] = "Event Detail";
    Layout = "_LayoutAdmin";
}
<section class="content-main">
    <div class="content-header">
        <a href="javascript:history.back()"><i class="material-icons md-arrow_back"></i> Quay lại </a>
    </div>
    <div class="card mb-4">
        <div class="card-header bg-brand-2" style="height: 150px; background: #3BB77E;"></div>
        <div class="card-body">
            <div class="row">
                <div class="col-xl col-lg flex-grow-0" style="flex-basis: 230px">
                    <div class="img-thumbnail shadow w-100 bg-white position-relative text-center" style="height: 190px; width: 200px; margin-top: -120px">
                        <img src="@((Model.Event.ImageUrl ?? "").Contains("&")
                                ? Model.Event.ImageUrl.Split('&')[0]
                                : Model.Event.ImageUrl)" class="center-xy img-fluid" alt="Event Image" />
                    </div>
                </div>
                <div class="col-xl col-lg">
                    <h3>@Model.Event.Title</h3>
                    <p>@Model.Event.Address</p>
                </div>
                <div class="col-xl-4 text-md-end">
                    @if(Model.Event.Status == "Open")
                    {
                        <a href="#" class="btn btn-primary">Đang diễn ra</a>
                    }
                    else if (Model.Event.Status == "OnGoing")
                    {
                        <a href="#" class="btn btn-primary">Đang bắt đầu</a>
                    }
                    else if (Model.Event.Status == "Complete")
                    {
                        <a href="#" class="btn btn-primary">Đã hoàn thành</a>
                    }
                    else if(Model.Event.Status == "Close")
                    {
                        <a href="#" class="btn btn-danger">Đã kết thúc</a>
                    }
                </div>
            </div>
            <hr class="my-4" />
            <div class="row g-4">
                <div class="col-md-12 col-lg-4 col-xl-3">
                    <article class="box">
                        <p class="mb-0 text-muted">Số TNV tham gia:</p>
                        <h5 class="text-success">@(Model.Participation?.Current ?? 0) người</h5>
                        <p class="mb-0 text-muted">Số TNV tối đa:</p>
                        <h5 class="text-success mb-0">@Model.Event.MaxParticipants người</h5>
                    </article>
                </div>
                <div class="col-sm-6 col-lg-4 col-xl-4">
                    <h6>Thông tin đội trưởng</h6>
                    @if (Model.TeamLeader != null)
                    {
                    <p>
                        Tên: @Model.TeamLeader.FullName <br />
                        Email: @Model.TeamLeader.Email <br />
                        SĐT: +84 @Model.TeamLeader.PhoneNumber
                    </p>
                    }
                    else
                    {
                        <p class="text-muted">Sự kiện này chưa có đội trưởng.</p>
                    }
                </div>
                <div class="col-sm-6 col-lg-4 col-xl-5  ">
                    <h6>Thông tin sự kiện</h6>
                    <p>
                        Thời gian: @Model.Event.StartDate?.ToString("HH:mm dd/MM/yyyy") - @Model.Event.EndDate?.ToString("HH:mm dd/MM/yyyy")<br />
                        Địa điểm: @Model.Event.Address  <br />
                        Mô tả: @Model.Event.Description
                    </p>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="card mb-4">
            <header class="card-header">
                <div class="row gx-3">
                    <div class="col-lg-4 col-md-6 me-auto">
                        <input type="text" placeholder="Search..." class="form-control" />
                    </div>
                    <div class="col-lg-2 col-md-3 col-6">
                        <select class="form-select">
                            <option>Trạng thái</option>
                            <option>Chờ phê duyệt</option>
                            <option>Đã phê duyệt</option>
                            <option>Đã từ chối</option>
                        </select>
                    </div>
                    <div class="col-lg-2 col-md-3 col-6">
                        <select class="form-select">
                            <option>Show 20</option>
                            <option>Show 30</option>
                            <option>Show 40</option>
                        </select>
                    </div>
                </div>
            </header>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Họ và tên</th>
                                <th>Email</th>
                                <th>Vai trò</th>
                                <th>Trạng thái</th>
                                <th>Nhiệm vụ</th>
                                <th>Vật dụng</th>
                                <th class="text-end">Thao tác</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.Volunteers)
                            {
                                <tr>
                                    <td width="25%">
                                        <a href="#" class="itemside">
                                            <div class="left">
                                                <img src="@item.User.Avatar" class="img-sm img-avatar" alt="Userpic" />
                                            </div>
                                            <div class="info pl-3">
                                                <h6 class="mb-0 title">@item.User.FullName</h6>
                                            </div>
                                        </a>
                                    </td>
                                    <td>@item.User.Email</td>
                                    @if (item.Volunteer.ApplicationType == "Volunteer")
                                    {
                                        <td>Tình nguyện viên</td>
                                    }
                                    else if (item.Volunteer.ApplicationType == "TeamLeader")
                                    {
                                        <td>Đội trưởng</td>
                                    }
                                    @if(item.Volunteer.Status == "Approved")
                                    {
                                        <td class="text-success">Đã phê duyệt</td>
                                    }
                                    else if (item.Volunteer.Status == "Pending")
                                    {
                                        <td class="text-warning">Chờ phê duyệt</td>
                                    }
                                    else if (item.Volunteer.Status == "Rejected")
                                    {
                                        <td class="text-danger">Đã từ chối</td>
                                    }
                                    else if (item.Volunteer.Status == "Removed")
                                    {
                                        <td class="text-danger">Đã bị loại</td>
                                    }
                                    <td>@item.Volunteer.Assignment</td>
                                    <td>@item.Volunteer.CarryItems</td>
                                    <td class="text-end">
                                        @if (item.Volunteer.Status == "Pending")
                                        {
                                            if (item.Volunteer.ApplicationType == "TeamLeader")
                                            {
                                                if (Model.TeamLeader == null)
                                                {
                                                    <form asp-controller="EventStaff" asp-action="ApproveVolunteer" asp-route-id="@item.Volunteer.VolunteerId" method="post" class="approve-form" style="display:inline-block;">
                                                        <button type="submit" class="btn btn-sm btn-brand rounded font-sm">Phê duyệt ĐT</button>
                                                    </form>
                                                }

                                                <form asp-controller="EventStaff" asp-action="RejectVolunteer" asp-route-id="@item.Volunteer.VolunteerId" method="post" class="reject-form" style="display:inline-block;">
                                                    <button type="submit" class="btn btn-sm btn-danger rounded font-sm">Từ chối ĐT</button>
                                                </form>
                                            }
                                            else
                                            {
                                                <form asp-controller="EventStaff" asp-action="ApproveVolunteer" asp-route-id="@item.Volunteer.VolunteerId" method="post" class="approve-form" style="display:inline-block;">
                                                    <button type="submit" class="btn btn-sm btn-brand rounded font-sm">Phê duyệt TNV</button>
                                                </form>
                                                <form asp-controller="EventStaff" asp-action="RejectVolunteer" asp-route-id="@item.Volunteer.VolunteerId" method="post" class="reject-form" style="display:inline-block;">
                                                    <button type="submit" class="btn btn-sm btn-danger rounded font-sm">Từ chối TNV</button>
                                                </form>
                                            }
                                        }
                                        else if (item.Volunteer.Status == "Approved")
                                        {
                                            <a href="#"
                                               class="btn btn-sm btn-danger rounded font-sm kick-btn"
                                               data-userid="@item.Volunteer.UserId"
                                               data-eventid="@item.Volunteer.CleanEventId">
                                                Loại
                                            </a>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="pagination-area mt-15 mb-50">
            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-start">
                </ul>
            </nav>
        </div>
    </div>
    <div class="card mb-4">
        <div class="card-header">
            <h4 class="card-title mb-0">Kênh trò chuyện sự kiện</h4>
        </div>
        <div class="card-body">
            <div class="chat-container-admin">
                <div id="messageList" class="messages">
                    @if (Model.ChatMessages != null && Model.ChatMessages.Any())
                    {
                        @for (var i = 0; i < Model.ChatMessages.Count(); i++)
                        {
                            var msg = Model.ChatMessages.ElementAt(i);
                            var isOwnMessage = msg.SenderId == ViewBag.SenderId?.ToString();

                            var prevMsg = i > 0 ? Model.ChatMessages.ElementAt(i - 1) : null;
                            var nextMsg = i < Model.ChatMessages.Count() - 1 ? Model.ChatMessages.ElementAt(i + 1) : null;

                            var isGrouped = prevMsg != null && prevMsg.SenderId == msg.SenderId;
                            var isLastInGroup = nextMsg == null || nextMsg.SenderId != msg.SenderId;

                            var messageClass = isOwnMessage ? "message own" : isLastInGroup ? "message" : "message grouped";

                            <div class="@messageClass" data-sender-id="@msg.SenderId">
                                @if (!isOwnMessage && isLastInGroup)
                                {
                                    <img src="@msg.SenderAvatar" alt="@msg.SenderName" class="avatar" />
                                }

                                <div class="bubble">
                                    @if (!isOwnMessage && isLastInGroup)
                                    {
                                        <div class="sender-name">@msg.SenderName</div>
                                    }

                                    <div class="content">@msg.Content</div>
                                    <div class="timestamp">@msg.Timestamp.ToString("HH:mm")</div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-center text-muted mt-3">Chưa có tin nhắn nào trong sự kiện này.</p>
                    }
                </div>

                <div class="input-area">
                    <input type="text" id="messageInput" class="form-control" placeholder="Nhập tin nhắn với tư cách Admin...">
                    <button id="sendButton" class="btn-send" aria-label="Gửi tin nhắn">
                        <i class="fa fa-paper-plane" aria-hidden="true"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</section>
@section Scripts {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <style>
        .chat-container-admin {
    display: flex;
    flex-direction: column;
    height: 600px; /* Hoặc chiều cao bạn muốn */
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    overflow: hidden;
    background-color: #f9f9f9;
}

.chat-container-admin .messages {
    flex-grow: 1;
    overflow-y: auto;
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 2px; /* Khoảng cách nhỏ giữa các bubble */
}

.chat-container-admin .message {
    display: flex;
    align-items: flex-end;
    margin-bottom: 10px;
    max-width: 75%;
}

.chat-container-admin .message.grouped {
    margin-bottom: 2px;
    margin-top: 0;
    padding-left: 52px; /* Căn lề cho tin nhắn được nhóm */
}


.chat-container-admin .message .avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 12px;
}

.chat-container-admin .message .bubble {
    background-color: #ffffff;
    border-radius: 18px;
    padding: 10px 15px;
    position: relative;
    box-shadow: 0 1px 2px rgba(0,0,0,0.05);
}

.chat-container-admin .message.own {
    align-self: flex-end;
    flex-direction: row-reverse;
}

.chat-container-admin .message.own .bubble {
    background-color: #3BB77E; /* Màu của admin */
    color: white;
}

.chat-container-admin .sender-name {
    font-weight: 600;
    font-size: 0.9rem;
    margin-bottom: 4px;
    color: #3BB77E;
}

.chat-container-admin .content {
    word-wrap: break-word;
}

.chat-container-admin .timestamp {
    font-size: 0.75rem;
    color: #999;
    text-align: right;
    margin-top: 5px;
}
.chat-container-admin .message.own .timestamp {
    color: #e0f2e9;
}


.chat-container-admin .input-area {
    display: flex;
    padding: 10px;
    border-top: 1px solid #e0e0e0;
    background-color: #fff;
}

.chat-container-admin .btn-send {
    background: none;
    border: none;
    color: #3BB77E;
    font-size: 1.5rem;
    padding: 0 15px;
    cursor: pointer;
}
.new-message-animation {
    animation: fadeIn 0.5s ease-in-out;
}

@@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

    </style>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.approve-form').forEach(form => {
            form.addEventListener('submit', function (e) {
                e.preventDefault(); 

                Swal.fire({
                    title: 'Bạn chắc chắn không?',
                    text: "Bạn có muốn duyệt cho tình nguyện viện này tham gia sự kiện ?",
                    icon: 'success',
                    showCancelButton: true,
                    confirmButtonColor: '#3BB77E',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Đồng ý',
                    cancelButtonText: 'Hủy'
                }).then((result) => {
                    if (result.isConfirmed) {
                        form.submit(); 
                    }
                });
            });
        });

        document.querySelectorAll('.reject-form').forEach(form => {
            form.addEventListener('submit', function (e) {
                e.preventDefault(); 

                Swal.fire({
                    title: 'Bạn chắc chắn không?',
                    text: "Bạn có muốn từ chối cho tình nguyện viện này tham gia sự kiện ?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3BB77E',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Đồng ý',
                    cancelButtonText: 'Hủy'
                }).then((result) => {
                    if (result.isConfirmed) {
                        form.submit(); 
                    }
                });
            });
        });

    });
</script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.kick-btn').forEach(btn => {
                btn.addEventListener('click', function (e) {
                    e.preventDefault();

                    const userId = this.dataset.userid;
                    const eventId = this.dataset.eventid;
                    const url = `/Event/KickVolunteer?userId=${encodeURIComponent(userId)}&eventId=${encodeURIComponent(eventId)}`;

                    Swal.fire({
                        title: 'Xác nhận loại?',
                        text: "Bạn có chắc muốn loại tình nguyện viên này khỏi sự kiện?",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3BB77E',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Đồng ý',
                        cancelButtonText: 'Hủy'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = url;
                        }
                    });
                });
            });
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            if (document.getElementById("messageList")) {
                const eventId = '@ViewBag.EventId';
                const senderId = '@ViewBag.SenderId';
                const senderName = @Html.Raw(Json.Serialize(ViewBag.SenderName));
                const senderAvatar = '@ViewBag.SenderAvatar';
                const messageList = document.getElementById("messageList");
                const messageInput = document.getElementById("messageInput");
                const sendButton = document.getElementById("sendButton");

                function scrollToBottom() {
                    messageList.scrollTop = messageList.scrollHeight;
                }

                function formatTimestamp(dateString) {
                    const date = new Date(dateString);
                    if (isNaN(date)) return "";
                    const hours = date.getHours().toString().padStart(2, '0');
                    const minutes = date.getMinutes().toString().padStart(2, '0');
                    return `${hours}:${minutes}`;
                }

                scrollToBottom();

                const chatConnection = new signalR.HubConnectionBuilder()
                    .withUrl("https://localhost:7006/chathub?eventId=" + eventId) 
                    .withAutomaticReconnect()
                    .build();

                chatConnection.on("ReceiveMessage", function (message) {
                    const isOwn = message.senderId === senderId;

                    const lastMessageElement = messageList.querySelector(`div[data-sender-id='${message.senderId}']:last-of-type`);

                    if (lastMessageElement && !isOwn && lastMessageElement.classList.contains('message') && !lastMessageElement.classList.contains('own')) {
                        
                        const avatar = lastMessageElement.querySelector('.avatar');
                        if (avatar) avatar.remove();
                        const senderNameDiv = lastMessageElement.querySelector('.sender-name');
                        if (senderNameDiv) senderNameDiv.remove();
                        lastMessageElement.classList.add("grouped");
                        lastMessageElement.classList.remove("message"); 
                    }

                    const messageDiv = document.createElement('div');
                    messageDiv.dataset.senderId = message.senderId;
                    messageDiv.classList.add('message', 'new-message-animation');

                    if (isOwn) {
                        messageDiv.classList.add('own');
                    }

                    let innerHtmlContent = '';

                    if (!isOwn) {
                        innerHtmlContent += `<img src="${message.senderAvatar}" alt="${message.senderName}" class="avatar" />`;
                    }

                    innerHtmlContent += '<div class="bubble">';
                    if (!isOwn) {
                        innerHtmlContent += `<div class="sender-name">${message.senderName}</div>`;
                    }
                    innerHtmlContent += `<div class="content">${message.content}</div>`;
                    innerHtmlContent += `<div class="timestamp">${formatTimestamp(message.timestamp)}</div>`;
                    innerHtmlContent += '</div>';

                    messageDiv.innerHTML = innerHtmlContent;

                    const noMessageTag = messageList.querySelector('p');
                    if(noMessageTag) noMessageTag.remove();

                    messageList.appendChild(messageDiv);
                    scrollToBottom();
                });

                async function start() {
                    try {
                        await chatConnection.start();
                        console.log("SignalR Connected for Admin.");
                    } catch (err) {
                        console.error(err.toString());
                        setTimeout(start, 5000);
                    }
                };

                chatConnection.onclose(async () => {
                    await start();
                });

                start();

                function sendMessage() {
                    const msg = messageInput.value.trim();
                    if (msg) {
                        chatConnection.invoke("SendMessage", eventId, senderId, senderName, senderAvatar, msg)
                            .catch(err => console.error(err.toString()));
                        messageInput.value = "";
                        messageInput.focus();
                    }
                }

                messageInput.addEventListener("keypress", function (e) {
                    if (e.key === "Enter" && !e.shiftKey) {
                        e.preventDefault();
                        sendMessage();
                    }
                });

                sendButton.addEventListener("click", sendMessage);
            }
        });
    </script>
}